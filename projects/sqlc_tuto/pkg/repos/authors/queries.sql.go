// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package authors_repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio, birth_year
) VALUES (
  $1, $2, $3
)
RETURNING id, name, bio, birth_year, rating
`

type CreateAuthorParams struct {
	Name      string
	Bio       pgtype.Text
	BirthYear int32
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio, arg.BirthYear)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.BirthYear,
		&i.Rating,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio, birth_year, rating FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.BirthYear,
		&i.Rating,
	)
	return i, err
}

const getBioForAuthor = `-- name: GetBioForAuthor :one
SELECT bio FROM authors
WHERE id = $1
`

func (q *Queries) GetBioForAuthor(ctx context.Context, id int64) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getBioForAuthor, id)
	var bio pgtype.Text
	err := row.Scan(&bio)
	return bio, err
}

const getInfoForAuthor = `-- name: GetInfoForAuthor :one
SELECT bio, birth_year FROM authors
WHERE id = $1
`

type GetInfoForAuthorRow struct {
	Bio       pgtype.Text
	BirthYear int32
}

func (q *Queries) GetInfoForAuthor(ctx context.Context, id int64) (GetInfoForAuthorRow, error) {
	row := q.db.QueryRow(ctx, getInfoForAuthor, id)
	var i GetInfoForAuthorRow
	err := row.Scan(&i.Bio, &i.BirthYear)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT authors.id, authors.name, authors.bio, authors.birth_year, authors.rating, books.id, books.name, books.summary, books.author_id
FROM authors
inner join books on authors.id = books.author_id
ORDER BY authors.name, books.name
`

type ListAuthorsRow struct {
	Author Author
	Book   Book
}

func (q *Queries) ListAuthors(ctx context.Context) ([]ListAuthorsRow, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAuthorsRow
	for rows.Next() {
		var i ListAuthorsRow
		if err := rows.Scan(
			&i.Author.ID,
			&i.Author.Name,
			&i.Author.Bio,
			&i.Author.BirthYear,
			&i.Author.Rating,
			&i.Book.ID,
			&i.Book.Name,
			&i.Book.Summary,
			&i.Book.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthorsByIDs = `-- name: ListAuthorsByIDs :many
SELECT id, name, bio, birth_year, rating FROM authors
WHERE id = ANY($1::int[])
`

func (q *Queries) ListAuthorsByIDs(ctx context.Context, dollar_1 []int32) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthorsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.BirthYear,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
  set name = $2,
  bio = $3,
  rating = $4
WHERE id = $1
RETURNING id
`

type UpdateAuthorParams struct {
	ID     int64
	Name   string
	Bio    pgtype.Text
	Rating int32
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateAuthor,
		arg.ID,
		arg.Name,
		arg.Bio,
		arg.Rating,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
